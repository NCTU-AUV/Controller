# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\NCTU\2019_2nd\Auv\control_ui\pid_control.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from control_pkg.srv import PidControl, PidControlResponse
import rospy

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(560, 340)
        self.gridLayoutWidget = QtWidgets.QWidget(Dialog)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(30, 20, 500, 300))
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)

        self.labels = [0]*6
        self.minus_pushButtons = [0]*6
        self.plus_pushButtons = [0]*6
        self.labels_num = [0]*6
        self.sliders = [0]*6

        for i in range(6):
            self.addControlbar(i)

        self.labels[0].setText("P1")
        self.labels[1].setText("I1")
        self.labels[2].setText("D1")
        self.labels[3].setText("P2")
        self.labels[4].setText("I2")
        self.labels[5].setText("D2")
        
        self.send_button = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.send_button.setText("send")
        self.send_button.clicked.connect(self.send_pid_control_msg)
        self.gridLayout.addWidget(self.send_button, 6, 0, 1, 6)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def send_pid_control_msg(self):
        rospy.wait_for_service('pid_control')
        try:
            pid_control = rospy.ServiceProxy('pid_control', PidControl)
            resp = pid_control(float(self.labels_num[0].text()),
                                float(self.labels_num[1].text()), 
                                float(self.labels_num[2].text()), 
                                float(self.labels_num[3].text()), 
                                float(self.labels_num[4].text()), 
                                float(self.labels_num[5].text()))
            print("req = " + str(resp))
        except rospy.ServiceException as e:
            print("Service call failed: %s"%e)

    def addControlbar(self, iter):
        self.labels[iter] = QtWidgets.QLabel(self.gridLayoutWidget)
        self.gridLayout.addWidget(self.labels[iter], iter, 0, 1, 1)

        self.minus_pushButtons[iter] = QtWidgets.QPushButton(
            self.gridLayoutWidget)
        self.minus_pushButtons[iter].setText("-")
        self.minus_pushButtons[iter].clicked.connect(
            lambda: self.sliders[iter].setValue(self.sliders[iter].value()-1))
        # self.minus_pushButtons[iter].clicked.connect(self.send_pid_control_msg)
        self.gridLayout.addWidget(self.minus_pushButtons[iter], iter, 1, 1, 1)

        self.plus_pushButtons[iter] = QtWidgets.QPushButton(
            self.gridLayoutWidget)
        self.plus_pushButtons[iter].setText("+")
        self.plus_pushButtons[iter].clicked.connect(
            lambda: self.sliders[iter].setValue(self.sliders[iter].value()+1))
        # self.plus_pushButtons[iter].clicked.connect(self.send_pid_control_msg)
        self.gridLayout.addWidget(self.plus_pushButtons[iter], iter, 2, 1, 1)

        self.labels_num[iter] = QtWidgets.QLabel(self.gridLayoutWidget)
        self.labels_num[iter].setText("00")
        self.gridLayout.addWidget(self.labels_num[iter], iter, 3, 1, 1)

        self.sliders[iter] = QtWidgets.QSlider(self.gridLayoutWidget)
        self.sliders[iter].setOrientation(QtCore.Qt.Horizontal)
        self.sliders[iter].valueChanged.connect(self.labels_num[iter].setNum)
        # self.sliders[iter].valueChanged.connect(self.send_pid_control_msg)
        self.gridLayout.addWidget(self.sliders[iter], iter, 4, 1, 1)


